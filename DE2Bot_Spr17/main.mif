-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 2805;  --     JUMP   Init        ; Reset vector
           001 : B000;  --     RETI               ; Sonar interrupt (unused)
           002 : 287D;  --     JUMP   CTimer_ISR  ; Timer interrupt
           003 : B000;  --     RETI               ; UART interrupt (unused)
           004 : B000;  --     RETI               ; Motor stall interrupt (unused)
           005 : 0B2F;  --     LOAD   Zero
           006 : 9883;  --     OUT    LVELCMD     ; Stop motors
           007 : 988B;  --     OUT    RVELCMD
           008 : 98B2;  --     OUT    SONAREN     ; Disable sonar (optional)
           009 : 980A;  --     OUT    BEEP        ; Stop any beeping (optional)
           00A : 82F7;  --     CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           00B : 82D9;  --     CALL   BattCheck   ; Get battery voltage (and end if too low).
           00C : 9806;  --     OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           00D : 9003;  --     IN     XIO         ; XIO contains SAFETY signal
           00E : 4B57;  --     AND    Mask4       ; SAFETY signal is bit 4
           00F : 3815;  --     JPOS   WaitForUser ; If ready, jump to wait for PB3
           010 : 9002;  --     IN     TIMER       ; We'll use the timer value to
           011 : 4B54;  --     AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           012 : 6008;  --     SHIFT  8           ; Shift over to LED17
           013 : 9807;  --     OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           014 : 280D;  --     JUMP   WaitForSafety
           015 : 9002;  --     IN     TIMER        ; We'll blink the LEDs above PB3
           016 : 4B54;  --     AND    Mask1
           017 : 6005;  --     SHIFT  5            ; Both LEDG6 and LEDG7
           018 : 130D;  --     STORE  Temp         ; (overkill, but looks nice)
           019 : 6001;  --     SHIFT  1
           01A : 530D;  --     OR     Temp
           01B : 9807;  --     OUT    XLEDS
           01C : 9003;  --     IN     XIO          ; XIO contains KEYs
           01D : 4B55;  --     AND    Mask2        ; KEY3 mask (KEY0 is reset and can't be read)
           01E : 3815;  --     JPOS   WaitForUser  ; not ready (KEYs are active-low, hence JPOS)
           01F : 0B2F;  --     LOAD   Zero
           020 : 9807;  --     OUT    XLEDS        ; clear LEDs once ready to continue
           021 : 98C3;  --     OUT     RESETPOS            ; reset odometer in case wheels moved after programming
           022 : 0B2F;  --     LOAD    Zero
           023 : 1080;  --     STORE   DVel                ; desired forward velocity
           024 : 90C2;  --     IN      THETA
           025 : 107F;  --     STORE   DTheta              ; desired heading
           026 : B80A;  --     LOADI   10                  ; 10ms * 10 = 0.1s rate, or 10Hz.
           027 : 980C;  --     OUT     CTIMER              ; turn on timer peripheral
           028 : 0B4E;  --     LOAD    Play                ; Set forward button
           029 : 1316;  --     STORE   BtnForward          ; ""
           02A : 0B4F;  --     LOAD    FastF               ; Set turn right button
           02B : 1317;  --     STORE   BtnTurnRight        ; ""
           02C : 0B4D;  --     LOAD    Rew                 ; Set turn left button
           02D : 1318;  --     STORE   BtnTurnLeft         ; ""
           02E : 0B3B;  --     LOAD    VolUp               ; Set forward small button
           02F : 1319;  --     STORE   BtnForwardSmall     ; ""
           030 : 0B51;  --     LOAD    BtnStop             ; Set turn right small button
           031 : 131A;  --     STORE   BtnTurnRightSmall   ; ""
           032 : 0B50;  --     LOAD    BtnPause            ; Set turn left small button
           033 : 131B;  --     STORE   BtnTurnLeftSmall    ; ""
           034 : 0B40;  --     LOAD    PrevChan			; Set parallel park button
           035 : 131C;  --     STORE   BtnParkParallel		; ""
           036 : 0B3D;  --     LOAD    Mute				; Set parallel park button
           037 : 131D;  --     STORE   BtnParkPerp			; ""
           038 : 0B3E;  --     LOAD    ChanUp				; Set move to perp button
           039 : 131F;  --     STORE   BtnForwardPerp		; ""
           03A : 0B4A;  --     LOAD    BtnZero			; Set move to perp button
           03B : 131E;  --     STORE   BtnParkPerpFirst	; ""
           03C : 90D1;  --     IN      IR_LO                   ; Capture remote button press
           03D : 1314;  --     STORE   Remote                  ; ""
           03E : 9806;  --     OUT     LCD
           03F : 98D1;  --     OUT     IR_LO                   ; Clear remote code
           040 : BFFF;  --     LOADI   -1                      ; Reset perpindicular space
           041 : 1327;  --     STORE   PerpSpace               ; ""
           042 : 0B2F;  --     LOAD    Zero                    ; Clear Auto params
           043 : 130F;  --     STORE   AutoDistance            ; ""
           044 : 1311;  --     STORE   AutoAngle               ; ""
           045 : 8159;  --     CALL    WaitForForwardBtn       ; Check forward movement
           046 : 8163;  --     CALL    WaitForForwardSmallBtn  ; Check forward small movement
           047 : 816D;  --     CALL    WaitForRightTurnBtn     ; Check right turn movement
           048 : 8177;  --     CALL    WaitForRightTurnSmallBtn; Check right turn small movement
           049 : 8181;  --     CALL    WaitForLeftTurnBtn      ; Check left turn movement
           04A : 818B;  --     CALL    WaitForLeftTurnSmallBtn ; Check left turn small movement
           04B : 8132;  --     CALL    WaitForParallelBtn		; Check for parallel park button
           04C : 812A;  --     CALL    WaitForPerpBtn			; Check for perpindicular button
           04D : 814F;  --     CALL    WaitForForwardPerpBtn   ; Check for perpindicular button
           04E : 8144;  --     CALL    WaitForFirstPerpBtn		; Check for perpindicular button
           04F : 80D4;  --     CALL    CheckPerpAuto           ; Get perpindicular space if button pressed
           050 : 0B27;  --     LOAD    PerpSpace               ; ""
           051 : 303C;  --     JNEG    RemoteLoop              ; If no space selected repeat
           052 : 80B3;  --     CALL    GetToFirstPerp  ; Do actions to get to the first perpindicular space
           053 : 0B11;  --     LOAD    AutoAngle       ; Load the angle correction
           054 : 9806;  -- 	OUT     LCD
           055 : 0B2F;  -- 	LOAD    Zero
           056 : 1310;  -- 	STORE   Angle
           057 : 0B11;  -- 	LOAD    AutoAngle       ; Load the angle correction
           058 : 385A;  -- 	JPOS    CorrectLeft
           059 : 3063;  -- 	JNEG    CorrectRight
           05A : 0B11;  -- 	LOAD    AutoAngle
           05B : 6FFB;  -- 	ADDI    -5
           05C : 1311;  -- 	STORE   AutoAngle
           05D : 0B10;  -- 	LOAD    Angle
           05E : 6FFF;  -- 	ADDI    -1
           05F : 1310;  -- 	STORE   Angle
           060 : 0B11;  -- 	LOAD    AutoAngle
           061 : 385A;  -- 	JPOS    CorrectLeft
           062 : 286B;  -- 	JUMP    Finish
           063 : 0B11;  -- 	LOAD    AutoAngle   
           064 : 6805;  -- 	ADDI    5
           065 : 1311;  -- 	STORE   AutoAngle
           066 : 0B10;  -- 	LOAD    Angle
           067 : 6801;  -- 	ADDI    1
           068 : 1310;  -- 	STORE   Angle
           069 : 0B11;  -- 	LOAD    AutoAngle
           06A : 3063;  -- 	JNEG    CorrectRight
           06B : 0B10;  -- 	LOAD    Angle
           06C : 9806;  -- 	OUT     LCD
           06D : B828;  -- 	LOADI   40
           06E : 1315;  -- 	STORE   WaitTime
           06F : 8195;  -- 	CALL    WaitFT
           070 : 0B10;  -- 	LOAD    Angle
           071 : 81D9;  -- 	CALL    ABS
           072 : 6FF9;  -- 	ADDI    -7
           073 : 3875;  -- 	JPOS    DontTurn
           074 : 81BE;  --     CALL    Turn            ; Angle correction
           075 : 0B26;  --     LOAD    DistPerpFour    ; Load distane to the first perpindicular parking spot
           076 : 130E;  --     STORE   Distance        ; Store it
           077 : 81A7;  --     CALL    Traverse        ; Go to it
           078 : 0B0F;  --     LOAD    AutoDistance    ; Load the distance to the perpindicular spot selected
           079 : 130E;  --     STORE   Distance        ; Store that shit
           07A : 81A7;  --     CALL    Traverse        ; Go to it already
           07B : 811B;  --     CALL    ParkPerp        ; Park in that bitch
           07C : 283C;  --     JUMP    RemoteLoop      ; Loopty loop
           07D : 8081;  --     CALL   ControlMovement
           07E : B000;  --     RETI   ; return from ISR
           07F : 0000;  -- DTheta:    DW 0
           080 : 0000;  -- DVel:      DW 0
           081 : B832;  --     LOADI  50               ; used later to get a +/- constant
           082 : 10AC;  --     STORE  MaxVal
           083 : 8099;  --     CALL   GetThetaErr ; get the heading error
           084 : 6002;  --     SHIFT  2
           085 : 1098;  --     STORE  CMAErr           ; hold temporarily
           086 : 6002;  --     SHIFT  2                ; multiply by another 4
           087 : 80A0;  --     CALL   CapValue         ; get a +/- max of 50
           088 : 1898;  --     ADD    CMAErr
           089 : 1098;  --     STORE  CMAErr
           08A : B9FE;  --     LOADI  510
           08B : 10AC;  --     STORE  MaxVal
           08C : 0880;  --     LOAD   DVel
           08D : 80A0;  --     CALL   CapValue         ; ensure velocity is valid
           08E : 1080;  --     STORE  DVel             ; overwrite any invalid input
           08F : 1898;  --     ADD    CMAErr
           090 : 80A0;  --     CALL   CapValue         ; ensure velocity is valid
           091 : 988B;  --     OUT    RVELCMD
           092 : 0898;  --     LOAD   CMAErr
           093 : 81DA;  --     CALL   Neg              ; left wheel gets negative differential
           094 : 1880;  --     ADD    DVel
           095 : 80A0;  --     CALL   CapValue
           096 : 9883;  --     OUT    LVELCMD
           097 : 8800;  --     RETURN
           098 : 0000;  --     CMAErr: DW 0            ; holds angle error velocity
           099 : 90C2;  --     IN     THETA
           09A : 207F;  --     SUB    DTheta           ; actual - desired angle
           09B : 81DA;  --     CALL   Neg              ; desired - actual angle
           09C : 68B4;  --     ADDI   180
           09D : 81D3;  --     CALL   Mod360
           09E : 6F4C;  --     ADDI   -180
           09F : 8800;  --     RETURN
           0A0 : 20AC;  --     SUB     MaxVal
           0A1 : 38A7;  --     JPOS    CapVelHigh
           0A2 : 18AC;  --     ADD     MaxVal
           0A3 : 18AC;  --     ADD     MaxVal
           0A4 : 30A9;  --     JNEG    CapVelLow
           0A5 : 20AC;  --     SUB     MaxVal
           0A6 : 8800;  --     RETURN
           0A7 : 08AC;  --     LOAD    MaxVal
           0A8 : 8800;  --     RETURN
           0A9 : 08AC;  --     LOAD    MaxVal
           0AA : 81DA;  --     CALL    Neg
           0AB : 8800;  --     RETURN
           0AC : 01FE;  --     MaxVal: DW 510
           0AD : 9080;  --     IN      LPOS    ; Get LPOS
           0AE : 130D;  --     STORE   Temp    ; Store temporarily
           0AF : 9088;  --     IN      RPOS    ; Get RPOS
           0B0 : 81D9;  --     CALL    ABS     ; Absolute that shit
           0B1 : 1B0D;  --     ADD     Temp    ; Add both together
           0B2 : 8800;  --     RETURN          ; Bail out
           0B3 : 0B23;  --     LOAD    DistPerpOne     ; Load distance to the first intersection
           0B4 : 130E;  --     STORE   Distance        ; Store it
           0B5 : 81A7;  --     CALL    Traverse        ; Go to it
           0B6 : BFAA;  --     LOADI   -86             ; Turn almost 90
           0B7 : 1310;  --     STORE   Angle           ; ""
           0B8 : 81BE;  --     CALL    Turn            ; ""
           0B9 : 0B24;  --     LOAD    DistPerpTwo     ; Load distane to the second intersection
           0BA : 130E;  --     STORE   Distance        ; Store it
           0BB : 81A7;  --     CALL    Traverse        ; Go to it
           0BC : B856;  --     LOADI   86              ; Turn almost 90
           0BD : 1310;  --     STORE   Angle           ; ""
           0BE : 0B58;  --     LOAD 	mask5			;G
           0BF : 98B2;  -- 	OUT 	SONAREN
           0C0 : 81BE;  --     CALL    Turn            ; ""
           0C1 : 8122;  --     CALL 	SonarCheck		;
           0C2 : 0929;  --     LOAD	sonarAVG
           0C3 : 10D3;  --     STORE	sonarValueGood
           0C4 : 9804;  --     OUT     SSEG1
           0C5 : 0B2F;  --     LOAD    Zero
           0C6 : 1129;  --     STORE   sonarAVG
           0C7 : 0B25;  --     LOAD    DistPerpThree   ; Load distane to the first perpindicular parking spot
           0C8 : 130E;  --     STORE   Distance        ; Store it
           0C9 : 81A7;  --     CALL    Traverse        ; Go to it
           0CA : 8122;  --     CALL	SonarCheck
           0CB : 0929;  --     LOAD    sonarAVG
           0CC : 9805;  --     OUT     SSEG2
           0CD : 20D3;  --     SUB 	sonarValueGood
           0CE : 1311;  --     STORE 	AutoAngle
           0CF : 0B2F;  --     LOAD    Zero
           0D0 : 1129;  --     STORE   sonarAVG
           0D1 : 98B2;  -- 	OUT 	SONAREN
           0D2 : 8800;  --     RETURN                  ; Bail out
           0D3 : 0000;  -- sonarValueGood: 	DW 0
           0D4 : 0B14;  --     LOAD    Remote              ; Load Remote and check buttons 1-7
           0D5 : 2341;  --     SUB     BtnOne              ; ""
           0D6 : 40EA;  --     JZERO   SetOne              ; ""
           0D7 : 0B14;  --     LOAD    Remote              ; ""
           0D8 : 2342;  --     SUB     BtnTwo              ; ""
           0D9 : 40F1;  --     JZERO   SetTwo              ; ""
           0DA : 0B14;  --     LOAD    Remote              ; ""
           0DB : 2343;  --     SUB     BtnThree            ; ""
           0DC : 40F8;  --     JZERO   SetThree            ; ""
           0DD : 0B14;  --     LOAD    Remote              ; ""
           0DE : 2344;  --     SUB     BtnFour             ; ""
           0DF : 40FF;  --     JZERO   SetFour             ; ""
           0E0 : 0B14;  --     LOAD    Remote              ; ""
           0E1 : 2345;  --     SUB     BtnFive             ; ""
           0E2 : 4106;  --     JZERO   SetFive             ; ""
           0E3 : 0B14;  --     LOAD    Remote              ; ""
           0E4 : 2346;  --     SUB     BtnSix              ; ""
           0E5 : 410D;  --     JZERO   SetSix              ; ""
           0E6 : 0B14;  --     LOAD    Remote              ; ""
           0E7 : 2347;  --     SUB     BtnSeven            ; ""
           0E8 : 4114;  --     JZERO   SetSeven            ; ""
           0E9 : 291A;  --     JUMP    EndCheckPerpAuto    ; ""
           0EA : B806;  --     LOADI   6                   ; Space to go to
           0EB : 1327;  --     STORE   PerpSpace           ; ""
           0EC : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           0ED : 1314;  --     STORE   Remote              ; ""
           0EE : 0B2D;  --     LOAD    DistToSeven         ; Distance to travel
           0EF : 130F;  --     STORE   AutoDistance        ; ""
           0F0 : 291A;  --     JUMP    EndCheckPerpAuto    ; Bail out
           0F1 : B805;  --     LOADI   5                   ; Space to go to
           0F2 : 1327;  --     STORE   PerpSpace           ; ""
           0F3 : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           0F4 : 1314;  --     STORE   Remote              ; ""
           0F5 : 0B2C;  --     LOAD    DistToSix           ; Distance to travel
           0F6 : 130F;  --     STORE   AutoDistance        ; ""
           0F7 : 291A;  --     JUMP    EndCheckPerpAuto    ; Bail out
           0F8 : B804;  --     LOADI   4                   ; Space to go to
           0F9 : 1327;  --     STORE   PerpSpace           ; ""
           0FA : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           0FB : 1314;  --     STORE   Remote              ; ""
           0FC : 0B2B;  --     LOAD    DistToFive          ; Distance to travel
           0FD : 130F;  --     STORE   AutoDistance        ; ""
           0FE : 291A;  --     JUMP    EndCheckPerpAuto    ; Bail out
           0FF : B803;  --     LOADI   3                   ; Space to go to
           100 : 1327;  --     STORE   PerpSpace           ; ""
           101 : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           102 : 1314;  --     STORE   Remote              ; ""
           103 : 0B2A;  --     LOAD    DistToFour          ; Distance to travel
           104 : 130F;  --     STORE   AutoDistance        ; ""
           105 : 291A;  --     JUMP    EndCheckPerpAuto    ; Bail out
           106 : B802;  --     LOADI   2                   ; Space to go to
           107 : 1327;  --     STORE   PerpSpace           ; ""
           108 : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           109 : 1314;  --     STORE   Remote              ; ""
           10A : 0B29;  --     LOAD    DistToThree         ; Distance to travel
           10B : 130F;  --     STORE   AutoDistance        ; ""
           10C : 291A;  --     JUMP    EndCheckPerpAuto    ; Bail out
           10D : B801;  --     LOADI   1                   ; Space to go to
           10E : 1327;  --     STORE   PerpSpace           ; ""
           10F : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           110 : 1314;  --     STORE   Remote              ; ""
           111 : 0B28;  --     LOAD    DistToTwo           ; Distance to travel
           112 : 130F;  --     STORE   AutoDistance        ; ""
           113 : 291A;  --     JUMP    EndCheckPerpAuto    ; Bail out
           114 : B800;  --     LOADI   0                   ; Space to go to
           115 : 1327;  --     STORE   PerpSpace           ; ""
           116 : 1327;  --     STORE   PerpSpace           ; ""
           117 : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           118 : 1314;  --     STORE   Remote              ; ""
           119 : 130F;  --     STORE   AutoDistance        ; Distance to travel
           11A : 8800;  --     RETURN                      ; Bail out
           11B : BFAA;  --     LOADI   -86         ; Turn almost 90
           11C : 1310;  --     STORE   Angle       ; ""
           11D : 81BE;  --     CALL    Turn        ; ""
           11E : BA62;  --     LOADI   610         ; Distance to pull into parking spot
           11F : 130E;  --     STORE   Distance    ; Store it
           120 : 81A7;  --     CALL    Traverse    ; Park baby
           121 : 8800;  --     RETURN              ; Bail out
           122 : B801;  -- 	LOADI   1
           123 : 1315;  -- 	STORE   WaitTime
           124 : 8195;  -- 	CALL    WaitFT
           125 : 90AD;  --     IN 		DIST5
           126 : 1129;  --     STORE 	sonarAVG
           127 : 9806;  --     OUT     LCD
           128 : 8800;  --     RETURN
           129 : 0000;  -- sonarAVG:		DW 0;
           12A : 0B14;  --     LOAD    Remote          		; Get remote code
           12B : 231D;  --     SUB     BtnParkPerp      	    ; Subtract code for button parallel park
           12C : 3131;  --     JNEG    EndWaitPerp  			; If negative or positive end
           12D : 3931;  --     JPOS    EndWaitPerp  			; ""
           12E : 811B;  --     CALL    ParkPerp      			; Parallel Park
           12F : 0B2F;  --     LOAD    Zero            		; Clear Remote code
           130 : 1314;  --     STORE   Remote          		; ""
           131 : 8800;  --     RETURN                  		; Bail out
           132 : 0B14;  --     LOAD    Remote          		; Get remote code
           133 : 231C;  --     SUB     BtnParkParallel      	; Subtract code for button parallel park
           134 : 3139;  --     JNEG    EndWaitParallel  		; If negative or positive end
           135 : 3939;  --     JPOS    EndWaitParallel  		; ""
           136 : 813A;  --     CALL    ParkParallel			; Parallel Park
           137 : 0B2F;  --     LOAD    Zero            		; Clear Remote code
           138 : 1314;  --     STORE   Remote          		; ""
           139 : 8800;  --     RETURN                  		; Bail out
           13A : BFAB;  --     LOADI   -85         ; Turn almost 90
           13B : 1310;  --     STORE   Angle       ; ""
           13C : 81BE;  --     CALL    Turn        ; ""
           13D : B97C;  --     LOADI   380         ; Distance to pull into parking spot
           13E : 130E;  --     STORE   Distance    ; Store it
           13F : 81A7;  --     CALL    Traverse    ; Park baby
           140 : B855;  --    	LOADI   85         	; Turn almost 90
           141 : 1310;  --     STORE   Angle       ; ""
           142 : 81BE;  --     CALL    Turn		; ""
           143 : 8800;  --     RETURN              ; Bail out
           144 : 0B14;  --     LOAD    Remote          				; Get remote code
           145 : 231E;  --     SUB     BtnParkPerpFirst      			; Subtract code for button forward
           146 : 314E;  --     JNEG    EndWaitForFirstPerpBtn  		; If negative or positive end
           147 : 394E;  --     JPOS    EndWaitForFirstPerpBtn  		; ""
           148 : 80B3;  --     CALL    GetToFirstPerp        			; Start moving
           149 : 0B26;  --     LOAD    DistPerpFour    ; Load distane to the first perpindicular parking spot
           14A : 130E;  --     STORE   Distance        ; Store it
           14B : 81A7;  --     CALL    Traverse        ; Go to it
           14C : 0B2F;  --     LOAD    Zero            				; Clear Remote code
           14D : 1314;  --     STORE   Remote          				; ""
           14E : 8800;  --     RETURN                  				; Bail out
           14F : 0B14;  --     LOAD    Remote          				; Get remote code
           150 : 231F;  --     SUB     BtnForwardPerp      			; Subtract code for button forward
           151 : 3158;  --     JNEG    EndWaitForForwardPerpBtn  		; If negative or positive end
           152 : 3958;  --     JPOS    EndWaitForForwardPerpBtn  		; ""
           153 : 0B21;  --     LOAD    DistBetweenPerp     			; Distance between spots
           154 : 130E;  --     STORE   Distance        				; ""
           155 : 81A7;  --     CALL    Traverse        				; Start moving
           156 : 0B2F;  --     LOAD    Zero            				; Clear Remote code
           157 : 1314;  --     STORE   Remote          				; ""
           158 : 8800;  --     RETURN                  				; Bail out
           159 : 0B14;  --     LOAD    Remote          		; Get remote code
           15A : 2316;  --     SUB     BtnForward      		; Subtract code for button forward
           15B : 3162;  --     JNEG    EndWaitForward  		; If negative or positive end
           15C : 3962;  --     JPOS    EndWaitForward  		; ""
           15D : 0B22;  --     LOAD    DistStartToParallel     ; Go to first perp
           15E : 130E;  --     STORE   Distance        		; ""
           15F : 81A7;  --     CALL    Traverse        		; Start moving
           160 : 0B2F;  --     LOAD    Zero            		; Clear Remote code
           161 : 1314;  --     STORE   Remote          		; ""
           162 : 8800;  --     RETURN                  		; Bail out
           163 : 0B14;  --     LOAD    Remote              ; Get remote code
           164 : 2319;  --     SUB     BtnForwardSmall     ; Subtract code for button forward
           165 : 316C;  --     JNEG    EndWaitForwardSmall ; If negative or positive end
           166 : 396C;  --     JPOS    EndWaitForwardSmall ; ""
           167 : 0B20;  --     LOAD    DistBetweenParallel ; Distance to next parallel spot
           168 : 130E;  --     STORE   Distance            ; ""
           169 : 81A7;  --     CALL    Traverse            ; Start moving
           16A : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           16B : 1314;  --     STORE   Remote              ; ""
           16C : 8800;  --     RETURN                      ; Bail out
           16D : 0B14;  --     LOAD    Remote              ; Get remote code
           16E : 2317;  --     SUB     BtnTurnRight        ; Subtract code for turn right button
           16F : 3176;  --     JNEG    EndWaitTurnRight    ; If negative or positive end
           170 : 3976;  --     JPOS    EndWaitTurnRight    ; ""
           171 : BFA9;  --     LOADI   -87                 ; -90 Degrees
           172 : 1310;  --     STORE   Angle               ; ""
           173 : 81BE;  --     CALL    Turn                ; Start turning
           174 : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           175 : 1314;  --     STORE   Remote              ; ""
           176 : 8800;  --     RETURN                      ; Bail out
           177 : 0B14;  --     LOAD    Remote                  ; Get remote code
           178 : 231A;  --     SUB     BtnTurnRightSmall       ; Subtract code for turn right button
           179 : 3180;  --     JNEG    EndWaitTurnRightSmall   ; If negative or positive end
           17A : 3980;  --     JPOS    EndWaitTurnRightSmall   ; ""
           17B : BFF8;  --     LOADI   -8                      ; -8 Degrees
           17C : 1310;  --     STORE   Angle                   ; ""
           17D : 81BE;  --     CALL    Turn                    ; Start turning
           17E : 0B2F;  --     LOAD    Zero                    ; Clear Remote code
           17F : 1314;  --     STORE   Remote                  ; ""
           180 : 8800;  --     RETURN                          ; Bail out
           181 : 0B14;  --     LOAD    Remote              ; Get remote code
           182 : 2318;  --     SUB     BtnTurnLeft         ; Subtract code for button turn left
           183 : 318A;  --     JNEG    EndWaitTurnLeft     ; If negative or positive end
           184 : 398A;  --     JPOS    EndWaitTurnLeft     ; ""
           185 : B857;  --     LOADI   87                  ; 90 Degrees
           186 : 1310;  --     STORE   Angle               ; ""
           187 : 81BE;  --     CALL    Turn                ; Start turning
           188 : 0B2F;  --     LOAD    Zero                ; Clear Remote code
           189 : 1314;  --     STORE   Remote              ; ""
           18A : 8800;  --     RETURN                      ; Bail out
           18B : 0B14;  --     LOAD    Remote                  ; Get remote code
           18C : 231B;  --     SUB     BtnTurnLeftSmall        ; Subtract code for button turn left
           18D : 3194;  --     JNEG    EndWaitTurnLeftSmall    ; If negative or positive end
           18E : 3994;  --     JPOS    EndWaitTurnLeftSmall    ; ""
           18F : B808;  --     LOADI   8                       ; 8 Degrees
           190 : 1310;  --     STORE   Angle                   ; ""
           191 : 81BE;  --     CALL    Turn                    ; Start turning
           192 : 0B2F;  --     LOAD    Zero                    ; Clear Remote code
           193 : 1314;  --     STORE   Remote                  ; ""
           194 : 8800;  --     RETURN                          ; Bail out
           195 : 9802;  --     OUT     TIMER       ; Clear the timer
           196 : 9002;  --     IN      TIMER       ; Get time passed
           197 : 9807;  --     OUT     XLEDS       ; User-feedback that a pause is occurring.
           198 : 2315;  --     SUB     WaitTime    ; Subtract wait time.
           199 : 3196;  --     JNEG    WFloop      ; If its negative loop baby.
           19A : 0B2F;  --     LOAD    Zero        ; Clear WaitTime
           19B : 1315;  --     STORE   WaitTime    ; ""
           19C : 8800;  --     RETURN              ; Bail out
           19D : 0B2F;  --     LOAD    Zero        ; Load zero
           19E : 9883;  --     OUT     LVELCMD     ; Stop the robot
           19F : 988B;  --     OUT     RVELCMD     ; ""
           1A0 : 98C3;  --     OUT     RESETPOS    ; Reset odometry
           1A1 : 90C2;  --     IN      THETA       ; Pull in current heading
           1A2 : 107F;  --     STORE   Dtheta      ; Store it so we dont turn
           1A3 : 0B2F;  --     LOAD    Zero        ; Load Zero
           1A4 : 1080;  --     STORE   Dvel        ; No desired velocity
           1A5 : 82D3;  --     Call    Wait1       ; Wait 1 second
           1A6 : 8800;  --     RETURN              ; Bail out
           1A7 : 80AD;  --     CALL    GetWheelEncoderDist ; Get both wheel encoder starting positions
           1A8 : 1312;  --     STORE   StartX              ; Store that bad boy
           1A9 : 90C2;  --     IN      THETA               ; Dont change the angle cause we aint turnin'
           1AA : 107F;  --     STORE   Dtheta              ; ""
           1AB : 0B66;  --     LOAD    FMid                ; Mid speed
           1AC : 1080;  --     STORE   DVel                ; ""
           1AD : A802;  --     SEI     &B0010              ; Enable interrupts from source 2 (timer)
           1AE : 80AD;  --     CALL    GetWheelEncoderDist ; Get both wheel encoder starting positions
           1AF : 2312;  --     SUB     StartX              ; Subtract the starting position
           1B0 : 230E;  --     SUB     Distance            ; Subtract the distance we want to go
           1B1 : 31AE;  --     JNEG    Onwards             ; If negative repeat
           1B2 : 0B2F;  --     LOAD    Zero                ; Load zero
           1B3 : 1080;  --     STORE   DVel                ; Stop
           1B4 : 82D3;  --     CALL    Wait1               ; Make sure the robot has stopped
           1B5 : 8099;  --     CALL    GetThetaErr         ; Get our angle error during traversal
           1B6 : 1310;  --     STORE   Angle               ; Make robot point proper direction
           1B7 : A002;  --     CLI     &B0010              ; Disable interrupts from source 2 (timer)
           1B8 : 81BE;  --     CALL    Turn                ; Initiate the angle correction
           1B9 : 0B2F;  --     LOAD    Zero                ; Clear Distance & Temp
           1BA : 130E;  --     STORE   Distance            ; ""
           1BB : 130D;  --     STORE   Temp                ; ""
           1BC : 819D;  --     CALL    Stop                ; Stop the robot & reset odometry
           1BD : 8800;  --     RETURN                      ; Bail out
           1BE : 0B2F;  --     LOAD    Zero        ; Store forward velocity as 0 cause we aint goin' straight
           1BF : 1080;  --     STORE   DVel        ; ""
           1C0 : 90C2;  --     IN      THETA       ; Get current theta
           1C1 : 1B10;  --     ADD     Angle       ; Add our angle to current theta and store
           1C2 : 107F;  --     STORE   DTheta      ; ""
           1C3 : A802;  --     SEI     &B0010      ; Enable interrupts from source 2 (timer)
           1C4 : 8099;  --     CALL    GetThetaErr ; Get the heading error
           1C5 : 81D9;  --     CALL    Abs         ; Abolute value that shit
           1C6 : 6FFF;  --     ADDI    -1          ; Check if within 1 degrees
           1C7 : 39C4;  --     JPOS    TurnLoop    ; If not, keep turning
           1C8 : 0B2F;  --     LOAD    Zero        ; Clear Angle
           1C9 : 1310;  --     STORE   Angle       ; ""
           1CA : A002;  --     CLI     &B0010      ; Disable interrupts from source 2 (timer)
           1CB : 819D;  --     CALL    Stop        ; Stop the robot & reset odometry
           1CC : 8800;  --     RETURN              ; Bail out
           1CD : 90D1;  --     IN     IR_LO            ; Get the low word
           1CE : 2313;  --     SUB    RemoteCheck      ; Subtract key code
           1CF : 39CD;  --     JPOS   WaitForRemote    ; If positive loop
           1D0 : 31CD;  --     JNEG   WaitForRemote    ; If negative loop
           1D1 : 98D1;  --     OUT    IR_LO            ; Clear IR buffer for next check.
           1D2 : 8800;  --     RETURN                  ; Has to be zero so return
           1D3 : 31D6;  --     JNEG   M360N
           1D4 : 6E98;  --     ADDI   -360
           1D5 : 29D3;  --     JUMP   Mod360
           1D6 : 6968;  --     ADDI   360
           1D7 : 31D6;  --     JNEG   M360N
           1D8 : 8800;  --     RETURN
           1D9 : 39DC;  --     JPOS   Abs_r
           1DA : 5B2E;  --     XOR    NegOne       ; Flip all bits
           1DB : 6801;  --     ADDI   1            ; Add one (i.e. negate number)
           1DC : 8800;  --     RETURN
           1DD : 0A3D;  --     LOAD   AtanY
           1DE : 81D9;  --     CALL   Abs          ; abs(y)
           1DF : 123F;  --     STORE  AtanT
           1E0 : 0A3C;  --     LOAD   AtanX        ; abs(x)
           1E1 : 81D9;  --     CALL   Abs
           1E2 : 223F;  --     SUB    AtanT        ; abs(x) - abs(y)
           1E3 : 31EE;  --     JNEG   A2_sw        ; if abs(y) > abs(x), switch arguments.
           1E4 : 0A3C;  --     LOAD   AtanX        ; Octants 1, 4, 5, 8
           1E5 : 31EB;  --     JNEG   A2_R3
           1E6 : 81FD;  --     CALL   A2_calc      ; Octants 1, 8
           1E7 : 31E9;  --     JNEG   A2_R1n
           1E8 : 8800;  --     RETURN              ; Return raw value if in octant 1
           1E9 : 6968;  --     ADDI   360          ; Add 360 if we are in octant 8
           1EA : 8800;  --     RETURN
           1EB : 81FD;  --     CALL   A2_calc      ; Octants 4, 5
           1EC : 68B4;  --     ADDI   180          ; theta' = theta + 180
           1ED : 8800;  --     RETURN
           1EE : 0A3D;  --     LOAD   AtanY        ; Swap input arguments
           1EF : 123F;  --     STORE  AtanT
           1F0 : 0A3C;  --     LOAD   AtanX
           1F1 : 123D;  --     STORE  AtanY
           1F2 : 0A3F;  --     LOAD   AtanT
           1F3 : 123C;  --     STORE  AtanX
           1F4 : 39F9;  --     JPOS   A2_R2        ; If Y positive, octants 2,3
           1F5 : 81FD;  --     CALL   A2_calc      ; else octants 6, 7
           1F6 : 81DA;  --     CALL   Neg          ; Negatge the number
           1F7 : 690E;  --     ADDI   270          ; theta' = 270 - theta
           1F8 : 8800;  --     RETURN
           1F9 : 81FD;  --     CALL   A2_calc      ; Octants 2, 3
           1FA : 81DA;  --     CALL   Neg          ; negate the angle
           1FB : 685A;  --     ADDI   90           ; theta' = 90 - theta
           1FC : 8800;  --     RETURN
           1FD : 0A3D;  --     LOAD   AtanY
           1FE : 129C;  --     STORE  d16sN        ; Y in numerator
           1FF : 0A3C;  --     LOAD   AtanX
           200 : 129D;  --     STORE  d16sD        ; X in denominator
           201 : 8229;  --     CALL   A2_div       ; divide
           202 : 0AA2;  --     LOAD   dres16sQ     ; get the quotient (remainder ignored)
           203 : 123E;  --     STORE  AtanRatio
           204 : 1265;  --     STORE  m16sA
           205 : 1266;  --     STORE  m16sB
           206 : 8220;  --     CALL   A2_mult      ; X^2
           207 : 1265;  --     STORE  m16sA
           208 : 0A40;  --     LOAD   A2c
           209 : 1266;  --     STORE  m16sB
           20A : 8220;  --     CALL   A2_mult
           20B : 6900;  --     ADDI   256          ; 256/256+0.28125X^2
           20C : 129D;  --     STORE  d16sD
           20D : 0A3E;  --     LOAD   AtanRatio
           20E : 129C;  --     STORE  d16sN        ; Ratio in numerator
           20F : 8229;  --     CALL   A2_div       ; divide
           210 : 0AA2;  --     LOAD   dres16sQ     ; get the quotient (remainder ignored)
           211 : 1265;  --     STORE  m16sA        ; <= result in radians
           212 : 0A41;  --     LOAD   A2cd         ; degree conversion factor
           213 : 1266;  --     STORE  m16sB
           214 : 8220;  --     CALL   A2_mult      ; convert to degrees
           215 : 123F;  --     STORE  AtanT
           216 : 6017;  --     SHIFT  -7           ; check 7th bit
           217 : 4B30;  --     AND    One
           218 : 421D;  --     JZERO  A2_rdwn      ; round down
           219 : 0A3F;  --     LOAD   AtanT
           21A : 6018;  --     SHIFT  -8
           21B : 6801;  --     ADDI   1            ; round up
           21C : 8800;  --     RETURN
           21D : 0A3F;  --     LOAD   AtanT
           21E : 6018;  --     SHIFT  -8           ; round down
           21F : 8800;  --     RETURN
           220 : 8242;  --     CALL   Mult16s
           221 : 0A6A;  --     LOAD   mres16sH
           222 : 6008;  --     SHIFT  8            ; move high word of result up 8 bits
           223 : 126A;  --     STORE  mres16sH
           224 : 0A69;  --     LOAD   mres16sL
           225 : 6018;  --     SHIFT  -8           ; move low word of result down 8 bits
           226 : 4B5B;  --     AND    LowByte
           227 : 526A;  --     OR     mres16sH     ; combine high and low words of result
           228 : 8800;  --     RETURN
           229 : B809;  --     LOADI  9            ; loop 8 times (256 = 2^8)
           22A : 123F;  --     STORE  AtanT
           22B : 0A3F;  --     LOAD   AtanT
           22C : 6FFF;  --     ADDI   -1
           22D : 3A30;  --     JPOS   A2_DN        ; not done; continue shifting
           22E : 826B;  --     CALL   Div16s       ; do the standard division
           22F : 8800;  --     RETURN
           230 : 123F;  --     STORE  AtanT
           231 : 0A9C;  --     LOAD   d16sN        ; start by trying to scale the numerator
           232 : 6001;  --     SHIFT  1
           233 : 5A9C;  --     XOR    d16sN        ; if the sign changed,
           234 : 3238;  --     JNEG   A2_DD        ; switch to scaling the denominator
           235 : 5A9C;  --     XOR    d16sN        ; get back shifted version
           236 : 129C;  --     STORE  d16sN
           237 : 2A2B;  --     JUMP   A2_DL
           238 : 0A9D;  --     LOAD   d16sD
           239 : 6011;  --     SHIFT  -1           ; have to scale denominator
           23A : 129D;  --     STORE  d16sD
           23B : 2A2B;  --     JUMP   A2_DL
           23C : 0000;  -- AtanX:      DW 0
           23D : 0000;  -- AtanY:      DW 0
           23E : 0000;  -- AtanRatio:  DW 0        ; =y/x
           23F : 0000;  -- AtanT:      DW 0        ; temporary value
           240 : 0048;  -- A2c:        DW 72       ; 72/256=0.28125, with 8 fractional bits
           241 : 394C;  -- A2cd:       DW 14668    ; = 180/pi with 8 fractional bits
           242 : B800;  --     LOADI  0
           243 : 1267;  --     STORE  m16sc        ; clear carry
           244 : 126A;  --     STORE  mres16sH     ; clear result
           245 : B810;  --     LOADI  16           ; load 16 to counter
           246 : 1268;  --     STORE  mcnt16s
           247 : 0A67;  --     LOAD   m16sc        ; check the carry (from previous iteration)
           248 : 424C;  --     JZERO  Mult16s_noc  ; if no carry, move on
           249 : 0A6A;  --     LOAD   mres16sH     ; if a carry,
           24A : 1A65;  --     ADD    m16sA        ;  add multiplicand to result H
           24B : 126A;  --     STORE  mres16sH
           24C : 0A66;  --     LOAD   m16sB
           24D : 4B30;  --     AND    One          ; check bit 0 of multiplier
           24E : 1267;  --     STORE  m16sc        ; save as next carry
           24F : 4253;  --     JZERO  Mult16s_sh   ; if no carry, move on to shift
           250 : 0A6A;  --     LOAD   mres16sH     ; if bit 0 set,
           251 : 2265;  --     SUB    m16sA        ;  subtract multiplicand from result H
           252 : 126A;  --     STORE  mres16sH
           253 : 0A66;  --     LOAD   m16sB
           254 : 6011;  --     SHIFT  -1           ; shift result L >>1
           255 : 4A64;  --     AND    c7FFF        ; clear msb
           256 : 1266;  --     STORE  m16sB
           257 : 0A6A;  --     LOAD   mres16sH     ; load result H
           258 : 600F;  --     SHIFT  15           ; move lsb to msb
           259 : 5266;  --     OR     m16sB
           25A : 1266;  --     STORE  m16sB        ; result L now includes carry out from H
           25B : 0A6A;  --     LOAD   mres16sH
           25C : 6011;  --     SHIFT  -1
           25D : 126A;  --     STORE  mres16sH     ; shift result H >>1
           25E : 0A68;  --     LOAD   mcnt16s
           25F : 6FFF;  --     ADDI   -1           ; check counter
           260 : 3A46;  --     JPOS   Mult16s_loop ; need to iterate 16 times
           261 : 0A66;  --     LOAD   m16sB
           262 : 1269;  --     STORE  mres16sL     ; multiplier and result L shared a word
           263 : 8800;  --     RETURN              ; Done
           264 : 7FFF;  -- c7FFF: DW &H7FFF
           265 : 0000;  -- m16sA: DW 0 ; multiplicand
           266 : 0000;  -- m16sB: DW 0 ; multipler
           267 : 0000;  -- m16sc: DW 0 ; carry
           268 : 0000;  -- mcnt16s: DW 0 ; counter
           269 : 0000;  -- mres16sL: DW 0 ; result low
           26A : 0000;  -- mres16sH: DW 0 ; result high
           26B : B800;  --     LOADI  0
           26C : 12A3;  --     STORE  dres16sR     ; clear remainder result
           26D : 12A0;  --     STORE  d16sC1       ; clear carry
           26E : 0A9C;  --     LOAD   d16sN
           26F : 5A9D;  --     XOR    d16sD
           270 : 129E;  --     STORE  d16sS        ; sign determination = N XOR D
           271 : B811;  --     LOADI  17
           272 : 129F;  --     STORE  d16sT        ; preload counter with 17 (16+1)
           273 : 0A9D;  --     LOAD   d16sD
           274 : 81D9;  --     CALL   Abs          ; take absolute value of denominator
           275 : 129D;  --     STORE  d16sD
           276 : 0A9C;  --     LOAD   d16sN
           277 : 81D9;  --     CALL   Abs          ; take absolute value of numerator
           278 : 129C;  --     STORE  d16sN
           279 : 0A9C;  --     LOAD   d16sN
           27A : 601F;  --     SHIFT  -15          ; get msb
           27B : 4B30;  --     AND    One          ; only msb (because shift is arithmetic)
           27C : 12A1;  --     STORE  d16sC2       ; store as carry
           27D : 0A9C;  --     LOAD   d16sN
           27E : 6001;  --     SHIFT  1            ; shift <<1
           27F : 52A0;  --     OR     d16sC1       ; with carry
           280 : 129C;  --     STORE  d16sN
           281 : 0A9F;  --     LOAD   d16sT
           282 : 6FFF;  --     ADDI   -1           ; decrement counter
           283 : 4293;  --     JZERO  Div16s_sign  ; if finished looping, finalize result
           284 : 129F;  --     STORE  d16sT
           285 : 0AA3;  --     LOAD   dres16sR
           286 : 6001;  --     SHIFT  1            ; shift remainder
           287 : 52A1;  --     OR     d16sC2       ; with carry from other shift
           288 : 229D;  --     SUB    d16sD        ; subtract denominator from remainder
           289 : 328E;  --     JNEG   Div16s_add   ; if negative, need to add it back
           28A : 12A3;  --     STORE  dres16sR
           28B : B801;  --     LOADI  1
           28C : 12A0;  --     STORE  d16sC1       ; set carry
           28D : 2A79;  --     JUMP   Div16s_loop
           28E : 1A9D;  --     ADD    d16sD        ; add denominator back in
           28F : 12A3;  --     STORE  dres16sR
           290 : B800;  --     LOADI  0
           291 : 12A0;  --     STORE  d16sC1       ; clear carry
           292 : 2A79;  --     JUMP   Div16s_loop
           293 : 0A9C;  --     LOAD   d16sN
           294 : 12A2;  --     STORE  dres16sQ     ; numerator was used to hold quotient result
           295 : 0A9E;  --     LOAD   d16sS        ; check the sign indicator
           296 : 3298;  --     JNEG   Div16s_neg
           297 : 8800;  --     RETURN
           298 : 0AA2;  --     LOAD   dres16sQ     ; need to negate the result
           299 : 81DA;  --     CALL   Neg
           29A : 12A2;  --     STORE  dres16sQ
           29B : 8800;  --     RETURN
           29C : 0000;  -- d16sN:      DW 0 ; numerator
           29D : 0000;  -- d16sD:      DW 0 ; denominator
           29E : 0000;  -- d16sS:      DW 0 ; sign value
           29F : 0000;  -- d16sT:      DW 0 ; temp counter
           2A0 : 0000;  -- d16sC1:     DW 0 ; carry value
           2A1 : 0000;  -- d16sC2:     DW 0 ; carry value
           2A2 : 0000;  -- dres16sQ:   DW 0 ; quotient result
           2A3 : 0000;  -- dres16sR:   DW 0 ; remainder result
           2A4 : 0ACE;  --     LOAD   L2X
           2A5 : 81D9;  --     CALL   Abs
           2A6 : 12D0;  --     STORE  L2T1
           2A7 : 0ACF;  --     LOAD   L2Y
           2A8 : 81D9;  --     CALL   Abs
           2A9 : 22D0;  --     SUB    L2T1
           2AA : 32C6;  --     JNEG   GDSwap    ; swap if needed to get largest value in X
           2AB : 1AD0;  --     ADD    L2T1
           2AC : 1265;  --     STORE  m16sa
           2AD : B8F6;  --     LOADI  246       ; max * 246
           2AE : 1266;  --     STORE  m16sB
           2AF : 8242;  --     CALL   Mult16s
           2B0 : 0A6A;  --     LOAD   mres16sH
           2B1 : 6008;  --     SHIFT  8
           2B2 : 12D1;  --     STORE  L2T2
           2B3 : 0A69;  --     LOAD   mres16sL
           2B4 : 6018;  --     SHIFT  -8        ; / 256
           2B5 : 4B5B;  --     AND    LowByte
           2B6 : 52D1;  --     OR     L2T2
           2B7 : 12D2;  --     STORE  L2T3
           2B8 : 0AD0;  --     LOAD   L2T1
           2B9 : 1265;  --     STORE  m16sa
           2BA : B868;  --     LOADI  104       ; min * 104
           2BB : 1266;  --     STORE  m16sB
           2BC : 8242;  --     CALL   Mult16s
           2BD : 0A6A;  --     LOAD   mres16sH
           2BE : 6008;  --     SHIFT  8
           2BF : 12D1;  --     STORE  L2T2
           2C0 : 0A69;  --     LOAD   mres16sL
           2C1 : 6018;  --     SHIFT  -8        ; / 256
           2C2 : 4B5B;  --     AND    LowByte
           2C3 : 52D1;  --     OR     L2T2
           2C4 : 1AD2;  --     ADD    L2T3     ; sum
           2C5 : 8800;  --     RETURN
           2C6 : 1AD0;  --     ADD    L2T1
           2C7 : 12D1;  --     STORE  L2T2
           2C8 : 0AD0;  --     LOAD   L2T1
           2C9 : 12D2;  --     STORE  L2T3
           2CA : 0AD1;  --     LOAD   L2T2
           2CB : 12D0;  --     STORE  L2T1
           2CC : 0AD2;  --     LOAD   L2T3
           2CD : 2AAC;  --     JUMP   CalcDist
           2CE : 0000;  -- L2X:  DW 0
           2CF : 0000;  -- L2Y:  DW 0
           2D0 : 0000;  -- L2T1: DW 0
           2D1 : 0000;  -- L2T2: DW 0
           2D2 : 0000;  -- L2T3: DW 0
           2D3 : 9802;  --     OUT    TIMER
           2D4 : 9002;  --     IN     TIMER
           2D5 : 9807;  --     OUT    XLEDS       ; User-feedback that a pause is occurring.
           2D6 : 6FF6;  --     ADDI   -10         ; 1 second at 10Hz.
           2D7 : 32D4;  --     JNEG   Wloop
           2D8 : 8800;  --     RETURN
           2D9 : 82F1;  --     CALL   GetBattLvl
           2DA : 42D9;  --     JZERO  BattCheck   ; A/D hasn't had time to initialize
           2DB : 236A;  --     SUB    MinBatt
           2DC : 32DF;  --     JNEG   DeadBatt
           2DD : 1B6A;  --     ADD    MinBatt     ; get original value back
           2DE : 8800;  --     RETURN
           2DF : B820;  --     LOADI  &H20
           2E0 : 980A;  --     OUT    BEEP        ; start beep sound
           2E1 : 82F1;  --     CALL   GetBattLvl  ; get the battery level
           2E2 : 9804;  --     OUT    SSEG1       ; display it everywhere
           2E3 : 9805;  --     OUT    SSEG2
           2E4 : 9806;  --     OUT    LCD
           2E5 : 0B2F;  --     LOAD   Zero
           2E6 : 6FFF;  --     ADDI   -1          ; 0xFFFF
           2E7 : 9801;  --     OUT    LEDS        ; all LEDs on
           2E8 : 9807;  --     OUT    XLEDS
           2E9 : 82D3;  --     CALL   Wait1       ; 1 second
           2EA : B940;  --     LOADI  &H140       ; short, high-pitched beep
           2EB : 980A;  --     OUT    BEEP        ; stop beeping
           2EC : 0B2F;  --     LOAD   Zero
           2ED : 9801;  --     OUT    LEDS        ; LEDs off
           2EE : 9807;  --     OUT    XLEDS
           2EF : 82D3;  --     CALL   Wait1       ; 1 second
           2F0 : 2ADF;  --     JUMP   DeadBatt    ; repeat forever
           2F1 : 0B6C;  --     LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           2F2 : 9890;  --     OUT    I2C_CMD     ; to I2C_CMD
           2F3 : 9892;  --     OUT    I2C_RDY     ; start the communication
           2F4 : 82FF;  --     CALL   BlockI2C    ; wait for it to finish
           2F5 : 9091;  --     IN     I2C_DATA    ; get the returned data
           2F6 : 8800;  --     RETURN
           2F7 : 82FF;  --     CALL   BlockI2C    ; wait for idle
           2F8 : 0B6B;  --     LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           2F9 : 9890;  --     OUT    I2C_CMD     ; to I2C_CMD register
           2FA : 0B2F;  --     LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           2FB : 9891;  --     OUT    I2C_DATA    ; to I2C_DATA register
           2FC : 9892;  --     OUT    I2C_RDY     ; start the communication
           2FD : 82FF;  --     CALL   BlockI2C    ; wait for it to finish
           2FE : 8800;  --     RETURN
           2FF : 0B2F;  --     LOAD   Zero
           300 : 130D;  --     STORE  Temp        ; Used to check for timeout
           301 : 0B0D;  --     LOAD   Temp
           302 : 6801;  --     ADDI   1           ; this will result in ~0.1s timeout
           303 : 130D;  --     STORE  Temp
           304 : 4308;  --     JZERO  I2CError    ; Timeout occurred; error
           305 : 9092;  --     IN     I2C_RDY     ; Read busy signal
           306 : 3B01;  --     JPOS   BI2CL       ; If not 0, try again
           307 : 8800;  --     RETURN             ; Else return
           308 : 0B2F;  --     LOAD   Zero
           309 : 692C;  --     ADDI   &H12C       ; "I2C"
           30A : 9804;  --     OUT    SSEG1
           30B : 9805;  --     OUT    SSEG2       ; display error message
           30C : 2B08;  --     JUMP   I2CError
           30D : 0000;  -- Temp:                   DW 0        ; "Temp" is not a great name, but can be useful
           30E : 0000;  -- Distance:               DW 0        ; Distance to be traveled when moving
           30F : 0000;  -- AutoDistance:           DW 0        ; Distance for automation
           310 : 0000;  -- Angle:                  DW 0        ; Angle to turn to
           311 : 0000;  -- AutoAngle:              DW 0        ; Angle for automation
           312 : 0000;  -- StartX:                 DW 0        ; Starting X used for forward motion
           313 : 0000;  -- RemoteCheck:            DW 0        ; Used for wait for remote and check button
           314 : 0000;  -- Remote:                 DW 0        ; Used to temporarily store the remote code for loop
           315 : 0000;  -- WaitTime:               DW 0        ; Used to wait for a certain amount of time
           316 : 0000;  -- BtnForward:             DW 0        ; Button for moving forward
           317 : 0000;  -- BtnTurnRight:           DW 0        ; Button for turning right
           318 : 0000;  -- BtnTurnLeft:            DW 0        ; Button for turning left
           319 : 0000;  -- BtnForwardSmall:        DW 0        ; Button for moving forward a small amount
           31A : 0000;  -- BtnTurnRightSmall:      DW 0        ; Button for turning right a small amount
           31B : 0000;  -- BtnTurnLeftSmall:       DW 0        ; Button for turning left a small amount
           31C : 0000;  -- BtnParkParallel:        DW 0        ; Button for parallel parking
           31D : 0000;  -- BtnParkPerp:        	DW 0        ; Button for perp parking
           31E : 0000;  -- BtnParkPerpFirst:       DW 0        ; Button for perp parking getting to first
           31F : 0000;  -- BtnForwardPerp:         DW 0        ; Button for moving to next perp spot
           320 : 0294;  -- DistBetweenParallel:    DW &H294    ; Distance between parallel spots center to center
           321 : 01EA;  -- DistBetweenPerp:        DW &H1EA    ; Distance between perpindicular spots center to center
           322 : 06C8;  -- DistStartToParallel:    DW &H6C8    ; Distance to first parallel spot (center)
           323 : 02F0;  -- DistPerpOne:            DW &H2F0    ; Distance to first 90 turn for perpindicular
           324 : 065E;  -- DistPerpTwo:            DW &H65E    ; Distance to second 90 turn for perpinducular
           325 : 00B0;  -- DistPerpThree:          DW &H0B0    ; Distance from second 90 turn to first perpindicular spot (center)
           326 : 014F;  -- DistPerpFour:           DW &H14F	; Distance from second 90 turn to first perpindicular spot (center)
           327 : FFFF;  -- PerpSpace:              DW -1       ; Spot chosen for perpendicular autonomous parking
           328 : 01EA;  -- DistToTwo:              DW &H1EA    ; Distance to the second perp spot
           329 : 04E8;  -- DistToThree:            DW &H4E8    ; Distance to the second perp spot
           32A : 07E1;  -- DistToFour:             DW &H7E1    ; Distance to the second perp spot
           32B : 0AE1;  -- DistToFive:             DW &HAE1    ; Distance to the second perp spot
           32C : 0DC6;  -- DistToSix:              DW &HDC6    ; Distance to the second perp spot
           32D : 108E;  -- DistToSeven:            DW &H108E   ; Distance to the second perp spot
           32E : FFFF;  -- NegOne:   DW -1
           32F : 0000;  -- Zero:     DW 0
           330 : 0001;  -- One:      DW 1
           331 : 0002;  -- Two:      DW 2
           332 : 0003;  -- Three:    DW 3
           333 : 0004;  -- Four:     DW 4
           334 : 0005;  -- Five:     DW 5
           335 : 0006;  -- Six:      DW 6
           336 : 0007;  -- Seven:    DW 7
           337 : 0008;  -- Eight:    DW 8
           338 : 0009;  -- Nine:     DW 9
           339 : 000A;  -- Ten:      DW 10
           33A : 00FF;  -- Power:      DW &H00FF
           33B : 40BF;  -- VolUp:      DW &H40BF
           33C : C03F;  -- VolDown:    DW &HC03F
           33D : 906F;  -- Mute:       DW &H906F
           33E : 807F;  -- ChanUp:     DW &H807F
           33F : 40BF;  -- ChanDown:   DW &H40BF
           340 : 42BD;  -- PrevChan:   DW &H42BD
           341 : 20DF;  -- BtnOne:     DW &H20DF
           342 : A05F;  -- BtnTwo:     DW &HA05F
           343 : 609F;  -- BtnThree:   DW &H609F
           344 : E01F;  -- BtnFour:    DW &HE01F
           345 : 30CF;  -- BtnFive:    DW &H30CF
           346 : B04F;  -- BtnSix:     DW &HB04F
           347 : 708F;  -- BtnSeven:   DW &H708F
           348 : F00F;  -- BtnEight:   DW &HF00F
           349 : 38C7;  -- BtnNine:    DW &H38C7
           34A : B847;  -- BtnZero:    DW &HB847
           34B : 3AC5;  -- BtnEnter:   DW &H3AC5
           34C : FF00;  -- TvVcr:      DW &HFF00
           34D : 48B7;  -- Rew:        DW &H48B7
           34E : 28D7;  -- Play:       DW &H28D7
           34F : C837;  -- FastF:      DW &HC837
           350 : 8877;  -- BtnPause:   DW &H8877
           351 : 08F7;  -- BtnStop:    DW &H08F7
           352 : A857;  -- BtnRec:     DW &HA857
           353 : 0001;  -- Mask0:    DW &B00000001
           354 : 0002;  -- Mask1:    DW &B00000010
           355 : 0004;  -- Mask2:    DW &B00000100
           356 : 0008;  -- Mask3:    DW &B00001000
           357 : 0010;  -- Mask4:    DW &B00010000
           358 : 0020;  -- Mask5:    DW &B00100000
           359 : 0040;  -- Mask6:    DW &B01000000
           35A : 0080;  -- Mask7:    DW &B10000000
           35B : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           35C : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           35D : 03C1;  -- OneMeter:   DW 961       ; ~1m in 1.04mm units
           35E : 01E1;  -- HalfMeter:  DW 481       ; ~0.5m in 1.04mm units
           35F : 024A;  -- TwoFeet:    DW 586       ; ~2ft in 1.04mm units
           360 : 005A;  -- Deg90:      DW 90        ; 90 degrees in odometer units
           361 : 00B4;  -- Deg180:     DW 180       ; 180
           362 : 010E;  -- Deg270:     DW 270       ; 270
           363 : 0168;  -- Deg360:     DW 360       ; can never actually happen; for math only
           364 : 0064;  -- FSlow:      DW 100       ; 100 is about the lowest velocity value that will move
           365 : FF9C;  -- RSlow:      DW -100
           366 : 015E;  -- FMid:       DW 350       ; 350 is a medium speed
           367 : FEA2;  -- RMid:       DW -350
           368 : 01F4;  -- FFast:      DW 500       ; 500 is almost max speed (511 is max)
           369 : FE0C;  -- RFast:      DW -500
           36A : 008C;  -- MinBatt:    DW 140       ; 14.0V - minimum safe battery voltage
           36B : 1190;  -- I2CWCmd:    DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           36C : 0190;  -- I2CRCmd:    DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
